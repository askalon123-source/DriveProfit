import streamlit as st
import pandas as pd
import numpy as np
import joblib
from src.optimization import PriceOptimizer
from src.visualization import InterfaceDesigner
import matplotlib.pyplot as plt

st.set_page_config(page_title="Drivee Assistant", layout="wide")
st.title("üöó Drivee - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π")

# –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞")

base_price = st.sidebar.number_input("–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)", 100, 1000, 300)
distance = st.sidebar.number_input("–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)", 1, 50, 5)
duration = st.sidebar.number_input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)", 5, 120, 15)
driver_rating = st.sidebar.slider("–†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è", 1.0, 5.0, 4.7)
order_hour = st.sidebar.slider("–ß–∞—Å –∑–∞–∫–∞–∑–∞", 0, 23, 18)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É"):
    try:
        optimizer = PriceOptimizer()
        designer = InterfaceDesigner()
        
        order_features = {
            'price_start_local': base_price,
            'driver_rating': driver_rating,
            'distance_km': distance,
            'pickup_km': 1.0,  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º
            'order_hour': order_hour,
            'duration_in_seconds': duration * 60,
            'pickup_in_seconds': 300  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        result = optimizer.find_optimal_price(order_features)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.success("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ")
            st.metric("–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{result['optimal']['price']:.0f}‚ÇΩ")
            st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è", f"{result['optimal']['probability']:.1%}")
            st.metric("–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥", f"{result['optimal']['expected_revenue']:.0f}‚ÇΩ")
            
            if result['safe'] and result['safe']['price'] != result['optimal']['price']:
                st.metric("–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ü–µ–Ω–∞", f"{result['safe']['price']:.0f}‚ÇΩ")
        
        with col2:
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            order_info = {
                'distance_km': distance,
                'duration_min': duration,
                'base_price': base_price
            }
            
            fig = designer.create_driver_interface(order_info, result)
            st.pyplot(fig)
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        st.info("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python src/model.py")