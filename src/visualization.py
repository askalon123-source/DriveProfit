import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.patches import FancyBboxPatch
import numpy as np
import os
import sys

print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è...")

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
output_dir = os.path.join(project_root, 'output')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É output –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(output_dir, exist_ok=True)

print(f"üìÅ –ü–∞–ø–∫–∞ output: {output_dir}")

class InterfaceDesigner:
    def __init__(self):
        self.fig = None
        self.ax = None
    
    def create_driver_interface(self, order_info, recommendations):
        """
        –°–æ–∑–¥–∞–µ—Ç –º–∞–∫–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
        """
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
        self.fig, self.ax = plt.subplots(1, 1, figsize=(8, 10))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.ax.set_xlim(0, 400)
        self.ax.set_ylim(0, 600)
        self.ax.axis('off')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._add_text(200, 580, "Drivee - –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", size=16, weight='bold')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        self._add_order_info(order_info, 200, 520)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ
        self._add_price_recommendations(recommendations, 200, 400)
        
        # –®–∫–∞–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        self._add_probability_scale(recommendations, 200, 250)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        self._add_action_button(200, 150, recommendations)
        
        plt.tight_layout()
        return self.fig
    
    def _add_text(self, x, y, text, size=12, weight='normal', color='black'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.ax.text(x, y, text, 
                    fontsize=size, 
                    weight=weight, 
                    color=color,
                    ha='center', va='center',
                    fontfamily='DejaVu Sans')
    
    def _add_order_info(self, order_info, x, y):
        """–ë–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        # –§–æ–Ω –±–ª–æ–∫–∞
        rect = FancyBboxPatch((x-180, y-80), 360, 100,
                             boxstyle="round,pad=0.02",
                             facecolor='lightblue', alpha=0.3)
        self.ax.add_patch(rect)
        
        self._add_text(x, y, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ", size=14, weight='bold')
        self._add_text(x, y-20, f"–ú–∞—Ä—à—Ä—É—Ç: {order_info['distance_km']:.1f} –∫–º")
        self._add_text(x, y-40, f"–í—Ä–µ–º—è: {order_info['duration_min']:.0f} –º–∏–Ω")
        self._add_text(x, y-60, f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {order_info['base_price']}‚ÇΩ")
    
    def _add_price_recommendations(self, recommendations, x, y):
        """–ë–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ü–µ–Ω–µ"""
        optimal = recommendations['optimal']
        safe = recommendations.get('safe')
        
        self._add_text(x, y, "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–Ω—ã", size=14, weight='bold')
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if safe:
            safe_rect = FancyBboxPatch((x-180, y-60), 360, 40,
                                     boxstyle="round,pad=0.02",
                                     facecolor='green', alpha=0.3)
            self.ax.add_patch(safe_rect)
            self._add_text(x, y-40, f"–ù–∞–¥–µ–∂–Ω—ã–π: {safe['price']:.0f}‚ÇΩ (—à–∞–Ω—Å: {safe['probability']:.0%})")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        optimal_rect = FancyBboxPatch((x-180, y-110), 360, 40,
                                    boxstyle="round,pad=0.02", 
                                    facecolor='orange', alpha=0.3)
        self.ax.add_patch(optimal_rect)
        self._add_text(x, y-90, f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: {optimal['price']:.0f}‚ÇΩ (–¥–æ—Ö–æ–¥: {optimal['expected_revenue']:.0f}‚ÇΩ)")
        
        # –†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        risky_price = optimal['price'] * 1.2
        self._add_text(x, y-140, f"–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π: {risky_price:.0f}‚ÇΩ")
    
    def _add_probability_scale(self, recommendations, x, y):
        """–®–∫–∞–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∏—è"""
        self._add_text(x, y, "–®–∞–Ω—Å –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞", size=14, weight='bold')
        
        # –®–∫–∞–ª–∞
        scale_rect = patches.Rectangle((x-100, y-30), 200, 20, 
                                     facecolor='lightgray', alpha=0.5)
        self.ax.add_patch(scale_rect)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        prob = recommendations['optimal']['probability']
        fill_width = 200 * prob
        fill_rect = patches.Rectangle((x-100, y-30), fill_width, 20,
                                    facecolor='blue', alpha=0.7)
        self.ax.add_patch(fill_rect)
        
        # –¢–µ–∫—Å—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        self._add_text(x, y-20, f"{prob:.0%}", size=12, weight='bold', color='white')
    
    def _add_action_button(self, x, y, recommendations):
        """–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        button_rect = FancyBboxPatch((x-80, y-30), 160, 50,
                                   boxstyle="round,pad=0.1",
                                   facecolor='#4CAF50', alpha=0.8)
        self.ax.add_patch(button_rect)
        self._add_text(x, y-5, "–ü–û–î–¢–í–ï–†–î–ò–¢–¨", size=14, weight='bold', color='white')
        self._add_text(x, y-20, f"{recommendations['optimal']['price']:.0f}‚ÇΩ", 
                      size=16, weight='bold', color='white')

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞
def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∑–∞–π–Ω–µ—Ä
        designer = InterfaceDesigner()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        sample_recommendations = {
            'optimal': {
                'price': 350,
                'probability': 0.75,
                'expected_revenue': 262.5
            },
            'safe': {
                'price': 320,
                'probability': 0.9,
                'expected_revenue': 288
            }
        }
        
        sample_order_info = {
            'distance_km': 5.2,
            'duration_min': 15,
            'base_price': 300
        }
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
        print(f"   - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {sample_order_info['base_price']}‚ÇΩ")
        print(f"   - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {sample_recommendations['optimal']['price']}‚ÇΩ")
        print(f"   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {sample_recommendations['optimal']['probability']:.1%}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        fig = designer.create_driver_interface(sample_order_info, sample_recommendations)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        output_paths = [
            os.path.join(output_dir, 'driver_interface.png'),
            os.path.join(output_dir, 'interface.png')
        ]
        
        for output_path in output_paths:
            plt.savefig(output_path, dpi=150, bbox_inches='tight')
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path} ({file_size} –±–∞–π—Ç)")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {output_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print("üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
        plt.show()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üöÄ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–¥–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    else:
        print("\nüí• –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)