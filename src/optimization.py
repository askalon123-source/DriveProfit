import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib
import os
import sys
from typing import Dict, Any

print("üí∞ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω—ã...")

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
models_dir = os.path.join(project_root, 'models')
output_dir = os.path.join(project_root, 'output')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(output_dir, exist_ok=True)

print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
print(f"üìÅ –ü–∞–ø–∫–∞ models: {models_dir}")
print(f"üìÅ –ü–∞–ø–∫–∞ output: {output_dir}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
model_path = os.path.join(models_dir, 'acceptance_model.joblib')
if not os.path.exists(model_path):
    print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
    print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python src/model.py")
    sys.exit(1)

try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = joblib.load(model_path)
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    sys.exit(1)

class PriceOptimizer:
    def __init__(self, model):
        self.model = model
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å
        self.features = [
            'price_start_local', 'price_bid_local', 'price_ratio',
            'driver_rating', 'distance_km', 'order_hour'
        ]
        print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.features)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    
    def predict_probability(self, order_features: Dict[str, Any], bid_price: float) -> float:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = order_features.copy()
            features['price_bid_local'] = bid_price
            features['price_ratio'] = bid_price / features['price_start_local']
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ features
            input_data = {}
            for feature in self.features:
                if feature in features:
                    input_data[feature] = [features[feature]]
                else:
                    print(f"‚ö†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫ {feature} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if feature == 'driver_rating':
                        input_data[feature] = [4.5]
                    elif feature == 'distance_km':
                        input_data[feature] = [5.0]
                    elif feature == 'order_hour':
                        input_data[feature] = [12]
            
            input_df = pd.DataFrame(input_data)
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            input_df = input_df[self.features]
            
            probability = self.model.predict_proba(input_df)[0, 1]
            return probability
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return 0.5
    
    def find_optimal_price(self, order_features: Dict[str, Any], 
                          min_markup: float = 0.0, 
                          max_markup: float = 0.5, 
                          steps: int = 50) -> Dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
        
        base_price = order_features['price_start_local']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–Ω
        markups = np.linspace(min_markup, max_markup, steps)
        price_options = [base_price * (1 + markup) for markup in markups]
        
        results = []
        
        print("üîç –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã...")
        for i, price in enumerate(price_options):
            if i % 10 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤
                print(f"   ...—Ä–∞—Å—á–µ—Ç {i+1}/{len(price_options)}")
                
            prob = self.predict_probability(order_features, price)
            expected_revenue = price * prob
            
            results.append({
                'price': price,
                'probability': prob,
                'expected_revenue': expected_revenue,
                'markup_percent': ((price - base_price) / base_price) * 100
            })
        
        df_results = pd.DataFrame(results)
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        optimal_idx = df_results['expected_revenue'].idxmax()
        optimal = df_results.loc[optimal_idx]
        
        # –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ü–µ–Ω—É (–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        safe_candidates = df_results[df_results['probability'] >= 0.7]
        safe = safe_candidates.loc[safe_candidates['expected_revenue'].idxmax()] if len(safe_candidates) > 0 else optimal
        
        return {
            'optimal': optimal.to_dict(),
            'safe': safe.to_dict() if not safe.empty else None,
            'all_options': df_results,
            'base_price': base_price
        }
    
    def plot_optimization(self, optimization_result: Dict[str, Any]):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        df = optimization_result['all_options']
        optimal = optimization_result['optimal']
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è
        ax1.plot(df['price'], df['probability'], 'b-', linewidth=2, label='–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è')
        ax1.axvline(optimal['price'], color='r', linestyle='--', 
                   label=f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {optimal['price']:.0f}‚ÇΩ")
        ax1.set_xlabel('–¶–µ–Ω–∞ –±–∏–¥–∞ (‚ÇΩ)')
        ax1.set_ylabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è')
        ax1.set_title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—Ç —Ü–µ–Ω—ã')
        ax1.legend()
        ax1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥
        ax2.plot(df['price'], df['expected_revenue'], 'g-', linewidth=2, label='–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥')
        ax2.axvline(optimal['price'], color='r', linestyle='--',
                   label=f"–ú–∞–∫—Å–∏–º—É–º: {optimal['expected_revenue']:.0f}‚ÇΩ")
        ax2.set_xlabel('–¶–µ–Ω–∞ –±–∏–¥–∞ (‚ÇΩ)')
        ax2.set_ylabel('–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ (‚ÇΩ)')
        ax2.set_title('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–æ—Ö–æ–¥–∞')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        output_path = os.path.join(output_dir, 'price_optimization.png')
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return fig

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
if __name__ == "__main__":
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = PriceOptimizer(model)
        
        # –ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞
        sample_order = {
            'price_start_local': 300,
            'driver_rating': 4.7,
            'distance_km': 5.2,
            'order_hour': 18
        }
        
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–∞:")
        print(f"   - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {sample_order['price_start_local']}‚ÇΩ")
        print(f"   - –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {sample_order['distance_km']} –∫–º")
        print(f"   - –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è: {sample_order['driver_rating']}")
        print(f"   - –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {sample_order['order_hour']}:00")
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        result = optimizer.find_optimal_price(sample_order)
        
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {result['base_price']}‚ÇΩ")
        print(f"   ‚≠ê –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result['optimal']['price']:.0f}‚ÇΩ")
        print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result['optimal']['probability']:.1%}")
        print(f"   üíµ –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {result['optimal']['expected_revenue']:.0f}‚ÇΩ")
        print(f"   üìà –ù–∞–¥–±–∞–≤–∫–∞: {result['optimal']['markup_percent']:.1f}%")
        
        if result['safe'] and result['safe']['price'] != result['optimal']['price']:
            print(f"   üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ü–µ–Ω–∞: {result['safe']['price']:.0f}‚ÇΩ")
            print(f"   üõ°Ô∏è  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result['safe']['probability']:.1%}")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        optimizer.plot_optimization(result)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        print("\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        
        scenarios = [
            {"name": "–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞", "rating": 4.9, "distance": 3.0, "hour": 10},
            {"name": "–ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –¥–∞–ª—å–Ω—è—è –ø–æ–µ–∑–¥–∫–∞", "rating": 4.0, "distance": 20.0, "hour": 3},
            {"name": "–í–µ—á–µ—Ä–Ω–∏–π —á–∞—Å –ø–∏–∫", "rating": 4.5, "distance": 8.0, "hour": 19}
        ]
        
        for scenario in scenarios:
            test_order = {
                'price_start_local': 300,
                'driver_rating': scenario["rating"],
                'distance_km': scenario["distance"],
                'order_hour': scenario["hour"]
            }
            
            test_result = optimizer.find_optimal_price(test_order)
            optimal = test_result['optimal']
            
            print(f"   {scenario['name']}:")
            print(f"      - –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {optimal['price']:.0f}‚ÇΩ")
            print(f"      - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {optimal['probability']:.1%}")
            print(f"      - –î–æ—Ö–æ–¥: {optimal['expected_revenue']:.0f}‚ÇΩ")
        
        print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
        print("   python src/visualization.py")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.show()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()