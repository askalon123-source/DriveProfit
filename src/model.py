import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import os
import sys

print("ü§ñ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è ML-–º–æ–¥–µ–ª–∏...")

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
data_dir = os.path.join(project_root, 'data')
models_dir = os.path.join(project_root, 'models')
output_dir = os.path.join(project_root, 'output')

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(data_dir, exist_ok=True)
os.makedirs(models_dir, exist_ok=True)
os.makedirs(output_dir, exist_ok=True)

print(f"üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}")
print(f"üìÅ –ü–∞–ø–∫–∞ data: {data_dir}")
print(f"üìÅ –ü–∞–ø–∫–∞ models: {models_dir}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
data_path = os.path.join(data_dir, 'train.csv')
if not os.path.exists(data_path):
    print(f"‚ùå –§–∞–π–ª {data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python src/analysis.py")
    sys.exit(1)

try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data = pd.read_csv(data_path)
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(data)} –∑–∞–ø–∏—Å–µ–π, {len(data.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(data.columns)}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
if 'is_done' not in data.columns:
    print("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ 'is_done' (—Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)")
    sys.exit(1)

# –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

# –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if 'distance_km' not in data.columns:
    data['distance_km'] = data.get('distance_in_meters', 5000) / 1000

if 'price_ratio' not in data.columns:
    data['price_ratio'] = data['price_bid_local'] / data['price_start_local']

# –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
available_features = []
for feature in ['price_start_local', 'price_bid_local', 'price_ratio', 
                'driver_rating', 'distance_km', 'order_hour']:
    if feature in data.columns:
        available_features.append(feature)
    else:
        print(f"‚ö†Ô∏è –ü—Ä–∏–∑–Ω–∞–∫ {feature} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö")

print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(available_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {available_features}")

# –£–¥–∞–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
data_clean = data[available_features + ['is_done']].dropna()
print(f"üìà –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(data_clean)} –∑–∞–ø–∏—Å–µ–π")

if len(data_clean) == 0:
    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏!")
    sys.exit(1)

X = data_clean[available_features]
y = data_clean['is_done']

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

print(f"üìä –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:")
print(f"   - –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_train.shape[0]} –∑–∞–ø–∏—Å–µ–π")
print(f"   - –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {X_test.shape[0]} –∑–∞–ø–∏—Å–µ–π")
print(f"   - –ü—Ä–∏–Ω—è—Ç–æ –∑–∞–∫–∞–∑–æ–≤: {y_train.mean():.1%}")

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RandomForest...")

try:
    model = RandomForestClassifier(
        n_estimators=100,
        max_depth=10,
        min_samples_split=20,
        min_samples_leaf=10,
        random_state=42,
        n_jobs=-1
    )

    model.fit(X_train, y_train)
    print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
    sys.exit(1)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred = model.predict(X_test)
y_pred_proba = model.predict_proba(X_test)[:, 1]

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
accuracy = accuracy_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred_proba)

print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏:")
print(f"   - Accuracy: {accuracy:.3f}")
print(f"   - ROC-AUC: {roc_auc:.3f}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
print("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:")
print(classification_report(y_test, y_pred, target_names=['–û—Ç–∫–ª–æ–Ω–µ–Ω', '–ü—Ä–∏–Ω—è—Ç']))

# –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
feature_importance = pd.DataFrame({
    'feature': available_features,
    'importance': model.feature_importances_
}).sort_values('importance', ascending=False)

print("\nüîù –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
for _, row in feature_importance.iterrows():
    print(f"   - {row['feature']}: {row['importance']:.3f}")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
plt.figure(figsize=(10, 6))
sns.barplot(data=feature_importance, x='importance', y='feature')
plt.title('–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏')
plt.xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
plt.tight_layout()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
feature_importance_path = os.path.join(output_dir, 'feature_importance.png')
plt.savefig(feature_importance_path, dpi=150, bbox_inches='tight')
print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {feature_importance_path}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
model_path = os.path.join(models_dir, 'acceptance_model.joblib')
joblib.dump(model, model_path)
print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
if os.path.exists(model_path):
    file_size = os.path.getsize(model_path)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
else:
    print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏
print("\nüé™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏:")

def predict_acceptance_probability(features_dict):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        input_data = pd.DataFrame([features_dict])[available_features]
        probability = model.predict_proba(input_data)[0, 1]
        return probability
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return 0.5

# –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
examples = [
    {
        'price_start_local': 300,
        'price_bid_local': 320,
        'price_ratio': 320/300,
        'driver_rating': 4.8,
        'distance_km': 5.0,
        'order_hour': 18
    },
    {
        'price_start_local': 300,
        'price_bid_local': 400,
        'price_ratio': 400/300,
        'driver_rating': 4.2,
        'distance_km': 15.0,
        'order_hour': 3
    }
]

for i, example in enumerate(examples, 1):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    missing_features = [f for f in available_features if f not in example]
    if missing_features:
        print(f"‚ö†Ô∏è –í –ø—Ä–∏–º–µ—Ä–µ {i} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features}")
        continue
        
    prob = predict_acceptance_probability(example)
    print(f"   –ü—Ä–∏–º–µ—Ä {i}:")
    print(f"      - –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {example['price_start_local']}‚ÇΩ")
    print(f"      - –¶–µ–Ω–∞ –±–∏–¥–∞: {example['price_bid_local']}‚ÇΩ")
    print(f"      - –ù–∞–¥–±–∞–≤–∫–∞: {((example['price_ratio']-1)*100):.1f}%")
    print(f"      - –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è: {example['driver_rating']}")
    print(f"      - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {prob:.1%}")

print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ü–µ–Ω—ã:")
print("   python src/optimization.py")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∫–æ–Ω—Ü–µ
plt.show()