import pandas as pd
import numpy as np
from analysis import DataAnalyzer
from model import AcceptancePredictor
from optimization import PriceOptimizer
from visualization import InterfaceDesigner
import json

def main():
    print("üöó –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ Drivee...")
    
    # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    analyzer = DataAnalyzer('../data/train.csv')
    data = analyzer.analyze_acceptance_patterns()
    
    # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print("\nü§ñ –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    predictor = AcceptancePredictor()
    model = predictor.train(data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    predictor.save_model('../models/acceptance_model.joblib')
    
    # –®–∞–≥ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    print("\nüí∞ –®–∞–≥ 3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—ã...")
    optimizer = PriceOptimizer(predictor)
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–∫–∞–∑–∞
    sample_order = {
        'price_start_local': 300,
        'order_hour': 18,
        'order_day_of_week': 4,  # –ü—è—Ç–Ω–∏—Ü–∞
        'driver_rating': 4.8,
        'user_rating': 4.5,
        'distance_in_meters': 5000,
        'duration_in_seconds': 900,
        'pickup_in_meters': 1000,
        'pickup_in_seconds': 300,
        'driver_experience_days': 180
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
    result = optimizer.find_optimal_price(sample_order)
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {result['base_price']}‚ÇΩ")
    print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {result['optimal']['price']:.0f}‚ÇΩ")
    print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {result['optimal']['probability']:.1%}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {result['optimal']['expected_revenue']:.0f}‚ÇΩ")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimizer.plot_optimization_results(result)
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    print("\nüé® –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    designer = InterfaceDesigner()
    
    order_info = {
        'distance_km': sample_order['distance_in_meters'] / 1000,
        'duration_min': sample_order['duration_in_seconds'] / 60,
        'base_price': sample_order['price_start_local']
    }
    
    interface_fig = designer.create_driver_interface(order_info, result)
    interface_fig.savefig('../output/driver_interface.png', dpi=150, bbox_inches='tight')
    print("üíæ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/driver_interface.png")
    
    # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report(result, sample_order)
    
    print("\n‚úÖ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

def generate_report(optimization_result, order_features):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    report = {
        'timestamp': pd.Timestamp.now().isoformat(),
        'order_features': order_features,
        'recommendations': {
            'optimal_price': optimization_result['optimal']['price'],
            'optimal_probability': optimization_result['optimal']['probability'],
            'expected_revenue': optimization_result['optimal']['expected_revenue'],
            'safe_price': optimization_result.get('safe', {}).get('price'),
            'safe_probability': optimization_result.get('safe', {}).get('probability')
        },
        'analysis': {
            'bid_increase_percent': ((optimization_result['optimal']['price'] - 
                                    order_features['price_start_local']) / 
                                    order_features['price_start_local'] * 100),
            'revenue_improvement': ((optimization_result['optimal']['expected_revenue'] - 
                                   order_features['price_start_local']) / 
                                   order_features['price_start_local'] * 100)
        }
    }
    
    with open('../output/recommendation_report.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print("üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ output/recommendation_report.json")

if __name__ == "__main__":
    main()